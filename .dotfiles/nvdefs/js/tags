!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!TypeScript	C,constant	/constants/
!_TAG_KIND_DESCRIPTION!TypeScript	G,generator	/generators/
!_TAG_KIND_DESCRIPTION!TypeScript	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!TypeScript	c,class	/classes/
!_TAG_KIND_DESCRIPTION!TypeScript	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!TypeScript	f,function	/functions/
!_TAG_KIND_DESCRIPTION!TypeScript	g,enum	/enums/
!_TAG_KIND_DESCRIPTION!TypeScript	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!TypeScript	m,method	/methods/
!_TAG_KIND_DESCRIPTION!TypeScript	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!TypeScript	p,property	/properties/
!_TAG_KIND_DESCRIPTION!TypeScript	v,variable	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!TypeScript	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/al1-ce/.dotfiles/nvdefs/js/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
Arguments	jsh.d.ts	/^declare type Arguments = Array<string> & {$/;"	a
CommandError	jsh.d.ts	/^export declare class CommandError extends Error {$/;"	c
ICommandOptions	jsh.d.ts	/^export interface ICommandOptions {$/;"	i
IHttpRequestOptions	jsh.d.ts	/^export declare type IHttpRequestOptions = Pick<Partial<IHttpRawRequestOptions>, "headers" | "tim/;"	p	class:CommandError
_dirExists	jsh.d.ts	/^declare const _dirExists: (path: string) => boolean;$/;"	p	class:CommandError
_echo	jsh.d.ts	/^declare const _echo: {$/;"	C
_env	jsh.d.ts	/^declare const _env: Environment;$/;"	C
_exists	jsh.d.ts	/^declare const _exists: (path: string) => boolean;$/;"	p	class:CommandError
_exit	jsh.d.ts	/^declare const _exit: (exitCode?: number) => void;$/;"	C
_http	jsh.d.ts	/^declare const _http: {$/;"	p	class:CommandError
_mkDir	jsh.d.ts	/^declare const _mkDir: (path: string, recursive?: boolean) => void;$/;"	p	class:CommandError
_printf	jsh.d.ts	/^declare const _printf: (content: string) => boolean;$/;"	C
_prompt	jsh.d.ts	/^declare const _prompt: (prompt: string | (() => void)) => string;$/;"	C
_readFile	jsh.d.ts	/^declare const _readFile: (path: string, encoding?: BufferEncoding) => string;$/;"	p	class:CommandError
_readdir	jsh.d.ts	/^declare const _readdir: (path: string, recursive?: boolean) => string[];$/;"	p	class:CommandError
_rm	jsh.d.ts	/^declare const _rm: (path: string, recursive?: boolean) => void;$/;"	p	class:CommandError
_sleep	jsh.d.ts	/^declare const _sleep: (ms: number) => void;$/;"	C
_stdin	jsh.d.ts	/^declare const _stdin: () => string;$/;"	C
_writeFile	jsh.d.ts	/^declare const _writeFile: (path: string, contents: string, encoding?: BufferEncoding) => void;$/;"	p	class:CommandError
captureStdout	jsh.d.ts	/^    captureStdout?: boolean;$/;"	p	interface:ICommandOptions
command	jsh.d.ts	/^    command: string;$/;"	p	class:CommandError
constructor	jsh.d.ts	/^    constructor(command: string, stdout: string, stderr: string, status: number);$/;"	m	class:CommandError
echoCommand	jsh.d.ts	/^    echoCommand?: boolean;$/;"	p	interface:ICommandOptions
export	jsh.d.ts	/^export {};$/;"	p	class:CommandError
maxBuffer	jsh.d.ts	/^    maxBuffer?: number;$/;"	p	interface:ICommandOptions
noThrow	jsh.d.ts	/^    noThrow?: boolean;$/;"	p	interface:ICommandOptions
setEntryScriptPath	jsh.d.ts	/^export declare function setEntryScriptPath(scriptPath: string): void;$/;"	f
setupArguments	jsh.d.ts	/^export declare function setupArguments(passedInArguments: Array<string>): void;$/;"	f
shell	jsh.d.ts	/^    shell?: string | boolean | undefined;$/;"	p	interface:ICommandOptions
status	jsh.d.ts	/^    status: number;$/;"	p	class:CommandError
stderr	jsh.d.ts	/^    stderr: string;$/;"	p	class:CommandError
stdout	jsh.d.ts	/^    stdout: string;$/;"	p	class:CommandError
timeout	jsh.d.ts	/^    timeout?: number;$/;"	p	interface:ICommandOptions
warn	jsh.d.ts	/^    warn: (content: string | Error, ...optionalArgs: any[]) => void;$/;"	C
yellow	jsh.d.ts	/^    yellow(content: string | Error, ...optionalArgs: any[]): void;$/;"	C
