#!/usr/bin/env -S npx jsh
/// <reference path="/home/al1-ce/.dotfiles/nvdefs/js/jsh.d.ts" />
/// https://github.com/bradymholt/jsh

// const text = readFile(env["HOME"] + "/.dotfiles/remind");
// const lines = text.split("\n");
//
// for (let i = 0; i < lines.length - 1; ++i) {
//     const line = lines[i];
//     if (line.startsWith("#")) {
//         echo("\x1b[2m\x1b[4m" + line + "\x1b[0m");
//     } else {
//         echo(line);
//     }
// }

echo.gray = function (content) { echo("\x1b[37m%s\x1b[0m", content); }

function join_array(arr, sep) {
    let str = "";
    for (let i = 0; i < arr.length; ++i) {
        if (i != 0) str += sep;
        str += arr[i];
    }
    return str;
}

/* 

Read a ini file

[Section1]
Param1=value1
[Section2]
Param2=value2

*/
function parseINIString(data) {
    let regex = {
        section: /^\s*\[\s*([^\]]*)\s*\]\s*$/,
        param: /^\s*([^=]+?)\s*=\s*(.*?)\s*$/,
        comment: /^\s*;.*$/
    };
    let value = {};
    let lines = data.split(/[\r\n]+/);
    let section = null;
    lines.forEach(function (line) {
        if (regex.comment.test(line)) {
            return;
        } else if (regex.param.test(line)) {
            let match = line.match(regex.param);
            if (section) {
                value[section][match[1]] = match[2];
            } else {
                value[match[1]] = match[2];
            }
        } else if (regex.section.test(line)) {
            let match = line.match(regex.section);
            value[match[1]] = {};
            section = match[1];
        } else if (line.length == 0 && section) {
            section = null;
        };
    });
    return value;
}


function confirm(text, p_default) {
    let answer = read(() => { printf(text + (p_default ? " [Y/n]: " : " [y/N]: ")) }).toLowerCase()[0];
    if (answer == '\n' || answer == undefined) return p_default;
    if (answer == 'y') return true;
    if (answer == 'n') return false;
    echo("Please type 'y' or 'n'");
    return confirm(text, p_default);
}

usage(`\
Usage:
    ${$0} [flags] [command]

Flags (--flag=value):
    --dir,-d - sets working dir

Commands:
    list - lists all available scaffolds
    init - init dir using scaffold
`);

let argv = [$0].concat(args);
for (let i = 0; i < argv.length; ++i) {
    if (argv[i].startsWith('-')) {
        argv.splice(i, 1);
        --i;
    }
}
let argc = argv.length;

// let global = args.g || args.global;

if (argc == 1) { usage.printAndExit(0); }

let workdir = '.';
if ("d" in args) workdir = args.d;
if ("dir" in args) workdir = args.dir;

if (!(typeof workdir === 'string' || workdir instanceof String)) error("Must supply workdir with -d=dirname or --dir=dirname.")
if (!dirExists(workdir)) error(`Workdir '${workdir}' does not exist.`);

let conf_ini;
let conf;

try {
    let data = cat(`${env.HOME}/.config/scuff/config.ini`);
    conf_ini = parseINIString(data);
    if (!("config" in conf_ini)) {
        error("Config file is missing '[config]' section")
    }

    conf = conf_ini.config;

    if (!("path" in conf)) error("Missing scaffold directory.");
    if (!dirExists(conf.path)) error(`Supplied scaffold directory '${conf.path}' does not exist.`);
}
catch (e) {
    console.log(e);
}

if (argc < 2) usage.printAndExit(0);

let ls_dir = ls(conf.path, false);
let scf = [];
let scf_names = [];
for (let d of ls_dir) {
    if (dirExists(d)) {
        scf.push(d);
        let tmp = d.split('/');
        scf_names.push(tmp[tmp.length - 1]);
    }
}

if (argv[1] == "list") {
    for (let d of scf_names) {
        echo(d);
    }
    return 0;
}

if (argv[1] == "init") {
    if (argc < 3) error("Must provide scaffold name for init.");
    let idx = scf_names.indexOf(argv[2]);
    if (idx == -1) error(`Scaffold '${argv[2]}' does not exist.`);
    exec(`cp -irv "${scf[idx]}/." "${workdir}"`);
    return 0;
}

error(`Unknown command '${argv[1]}'`);

// console.log(conf['config']);
// console.log("path" in conf['config']);
